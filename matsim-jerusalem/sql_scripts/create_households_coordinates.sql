DROP TABLE IF EXISTS bental_households,                     households_in_polygon,					 households_final;-- bldg_rel - selecting all centroids of buildings where building is in the inner tazs,-- residintial buildings and ftype == 11(building) or ftype == 31 (building under construction)CREATE TABLE IF NOT EXISTS bental_households AS WITH bldg_rel AS  (SELECT *   FROM bldg_cent   WHERE st_intersects(centroid,                         (SELECT st_union(geometry)                          FROM inner_taz))     AND (uniq_id NOT IN            (SELECT bldg_id             FROM poi_bldg)          OR uniq_id IN            (SELECT bldg_id             FROM poi_bldg             WHERE USG_CODE = 7600))     AND (ftype = 11          OR ftype = 31)), -- bldg_cent_taz - joining taz to bldg_rel bldg_cent_taz AS  (SELECT bldg_rel.*,          inner_taz.taz   FROM bldg_rel   LEFT JOIN inner_taz ON st_intersects(bldg_rel.centroid, inner_taz.geometry)), -- ht - count of households per taz ht AS  (SELECT hometaz,          COUNT(*)   FROM households   GROUP BY hometaz   ORDER BY hometaz), -- bldg_taz_avg_ht - calculation of average building height per taz bldg_taz_avg_ht AS  (SELECT bldg_cent_taz.taz,          AVG(COALESCE(bldg_cent_taz.bldg_ht, 1)) AS bldg_ht_taz_avg   FROM bldg_cent_taz   LEFT JOIN ht ON bldg_cent_taz.taz = ht.hometaz   GROUP BY bldg_cent_taz.taz), -- bldg_ht_final_tbl - big table, where the building height is completed for bluilding without height,-- based on the average building height in the taz.-- tazs without households are exculded bldg_ht_final_tbl AS  (SELECT bldg_cent_taz.*,          ht.*,          CASE              WHEN bldg_cent_taz.bldg_ht IS NOT NULL THEN bldg_cent_taz.bldg_ht              ELSE bldg_taz_avg_ht.bldg_ht_taz_avg          END AS bldg_ht_final   FROM bldg_cent_taz   LEFT JOIN ht ON bldg_cent_taz.taz = ht.hometaz   LEFT JOIN bldg_taz_avg_ht ON bldg_taz_avg_ht.taz = ht.hometaz   WHERE ht.count IS NOT NULL), -- first_calc - calculating the volume of each building, the sum of all volumes in the taz,-- the relative volume for each building,-- and the multiplication of the number of households in taz by the relative volume of each building first_calc AS  (SELECT *,          area * bldg_ht_final AS volume,          sum(area * bldg_ht_final) OVER (PARTITION BY taz) AS taz_volume,                                         area * bldg_ht_final / sum(area * bldg_ht_final) OVER (PARTITION BY taz) AS rel_taz_volume,                                                                                               COUNT *area * bldg_ht_final / sum(area * bldg_ht_final) OVER (PARTITION BY taz) AS float_households_at_bldg   FROM bldg_ht_final_tbl), -- add_rn - adding row numbers for each row, ordered by float_households_at_bldg add_rn AS  (SELECT *,          row_number() OVER (PARTITION BY taz                             ORDER BY float_households_at_bldg) AS rn   FROM first_calc) -- bental_households - rounding the float_households_at_bldg using cascade_rounding_windowSELECT *,       cascade_rounding_window(float_households_at_bldg) OVER (PARTITION BY taz                                                               ORDER BY rn) AS households_at_bldgFROM add_rnORDER BY taz,         float_households_at_bldg DESC;-- assert bental_households goes into geometry columnsSELECT Populate_Geometry_Columns('public.bental_households'::regclass);-- households_in_polygon - row for each polygon, according to the count of household in TAZ. randomization is performedSELECT setseed(0.5);CREATE TABLE IF NOT EXISTS households_in_polygon ASSELECT bental_households.*,       st_x(bental_households.centroid) AS x,       st_y(bental_households.centroid) AS y,       1 AS COUNTERFROM bental_households,     generate_series(1,                     bental_households.households_at_bldg)ORDER BY taz,         random();-- households_final - final table, includes home coordinates of each household, join by taz and row number in tazCREATE TABLE IF NOT EXISTS households_final ASwith first_table as (select *, row_number() over (partition by hometaz) rn1 from households), second_table as (select taz,x,y, row_number() over (partition by taz) rn2 from households_in_polygon) select first_table.*, second_table.* FROM first_tableLEFT JOIN second_table ON first_table.rn1 = second_table.rn2 and first_table.hometaz = second_table.taz;CREATE INDEX idx_hhid_hf ON households_final(hhid);